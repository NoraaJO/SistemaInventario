##########################################$
# Falta un procedured para iniciar sesion #
###########################################
-- Agrega nuevo articulo
##################################################################################################################################################
# Vas a obtener el id de tipo articulo antes de hacer la inserción o cuando? recuerde que el dato de entrada es el nombre no @id_TipoArticulo INT# 
##################################################################################################################################################
CREATE PROCEDURE AgregarArticulo
    @nombre NVARCHAR(128),
    @precio FLOAT,
    @cantidad INT,
    @id_TipoArticulo INT
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO Articulo (nombre, precio, cantidad, id_TipoArticulo)
    VALUES (@nombre, @precio, @cantidad, @id_TipoArticulo);
END;

----
##########################################################################################################
# Actualizar hay un problema si es por nombre ya que puede actualizar algun articulo con el mismo nombre #
##########################################################################################################
CREATE PROCEDURE ActualizarArticuloPorNombre
    @nombre NVARCHAR(128),
    @nuevoPrecio FLOAT,
    @nuevaCantidad INT
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE Articulo
    SET cantidad = @nuevaCantidad
    WHERE nombre = @nombre;
END;


---
####################################################################################
# Falta el procedured para articulos y pedidos que muestre todos sin ningun filtro #
####################################################################################

CREATE PROCEDURE ConsultarArticuloPorNombre
    @nombre NVARCHAR(128)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT A.nombre, T.nombre as TipoArticulo, A.cantidad
    FROM Articulo A
    INNER JOIN TipoArticulo T ON A.id_TipoArticulo = T.id_TipoArticulo
    WHERE A.nombre = @nombre
    FOR JSON PATH, ROOT('ArticuloxNombre');
END;

---

CREATE PROCEDURE ConsultarArticuloPorTipo
    @id_TipoArticulo INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT A.nombre, TA.nombre as TipoArticulo, A.cantidad
    FROM Articulo A
    INNER JOIN TipoArticulo TA ON A.id_TipoArticulo = TA.id_TipoArticulo
    WHERE A.id_TipoArticulo = @id_TipoArticulo
    FOR JSON PATH, ROOT('ArticuloxTipo');
END; 



---
#################################################################################################################################################
# Vas a obtener el id de tipo articulo antes de hacer la inserción o cuando? recuerde que el dato de entrada es el nombre no @id_TipoPedido INT #
# Y no es tipo de pedido es estado recuerde.                                                                                                    #
#################################################################################################################################################
CREATE PROCEDURE AgregarPedido --REVISAR
    @descripcion NVARCHAR(128),
    @nombreCliente NVARCHAR(128),
    @nombreEmpleado NVARCHAR(128),
    @fechaPedido DATE,
    @pagoTotal FLOAT,
    @id_TipoPedido INT
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO Pedido (descripcion, nombreCliente, nombreEmpleado, fechaPedido, pagoTotal, id_TipoPedido)
    VALUES (@descripcion, @nombreCliente, @nombreEmpleado, @fechaPedido, @pagoTotal, @id_TipoPedido);
END;
###########################
# Falta actualizar pedido #
###########################
---

CREATE PROCEDURE ConsultarPedidosPorCliente
    @nombreCliente NVARCHAR(128)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT P.id_Pedido, P.descripcion, P.nombreCliente, P.nombreEmpleado, P.fechaPedido, P.pagoTotal, T.nombre as TipoPedido
    FROM Pedido P
    INNER JOIN TipoPedido T ON P.id_TipoPedido = T.id_TipoPedido
    WHERE P.nombreCliente = @nombreCliente
    FOR JSON PATH, ROOT('PedidoxCliente');
END;

---

CREATE PROCEDURE ConsultarPedidosPorEmpleado
    @id_Estado INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT P.id_Pedido, P.descripcion, P.nombreCliente, P.nombreEmpleado, P.fechaPedido, P.pagoTotal, T.nombre as TipoPedido
    FROM Pedido P
    INNER JOIN TipoPedido T ON P.id_TipoPedido = T.id_TipoPedido
    WHERE P.id_Estado = @id_Estado
    FOR JSON PATH, ROOT('PedidoxEmpleado');
END;

---

CREATE PROCEDURE ConsultarPedidosPorEstado
    @nombreEmpleado NVARCHAR(128)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT P.id_Pedido, P.descripcion, P.nombreCliente, P.nombreEmpleado, P.fechaPedido, P.pagoTotal, T.nombre as TipoPedido
    FROM Pedido P
    INNER JOIN TipoPedido T ON P.id_TipoPedido = T.id_TipoPedido
    WHERE P.nombreEmpleado = @nombreEmpleado
    FOR JSON PATH, ROOT('PedidoxEmpleado');
END;


---

CREATE PROCEDURE ConsultarArticulosPorCantidad
AS
BEGIN
    SET NOCOUNT ON;

    SELECT *
    FROM Articulo
    WHERE cantidad <= 3;
END;

