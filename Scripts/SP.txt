##########################################$
# Falta un procedured para iniciar sesion #
###########################################

---Todos los articulos---

CREATE PROCEDURE ObtenerArticulos
AS
BEGIN
    SET NOCOUNT ON;
    SELECT A.id_Articulo, A.nombre, A.precio, A.cantidad, T.nombre as TipoArticulo
    FROM Articulo A
    INNER JOIN TipoArticulo T
    ON A.id_TipoArticulo = T.id_TipoArticulo
    FOR JSON AUTO;
END;


---Todos los pedidos---

CREATE PROCEDURE ObtenerPedidos
AS
BEGIN
    SET NOCOUNT ON;
    SELECT P.id_Pedido, P.descripcion, P.nombreCliente, P.nombreEmpleado, P.fechaPedido, P.pagoTotal, E.nombre as nombreEstado
    FROM Pedido P
    INNER JOIN Estado E
    ON P.id_Estado = E.id_Estado
    FOR JSON AUTO;
END;


----
##########################################################################################################
# Actualizar hay un problema si es por nombre ya que puede actualizar algun articulo con el mismo nombre #
##########################################################################################################
CREATE PROCEDURE ActualizarArticuloPorNombre
    @nombre NVARCHAR(128),
    @nuevoPrecio FLOAT,
    @nuevaCantidad INT
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE Articulo
    SET cantidad = @nuevaCantidad
    WHERE nombre = @nombre;
END;


---

CREATE PROCEDURE ConsultarArticuloPorNombre
    @nombre NVARCHAR(128)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT A.nombre, T.nombre as TipoArticulo, A.cantidad
    FROM Articulo A
    INNER JOIN TipoArticulo T ON A.id_TipoArticulo = T.id_TipoArticulo
    WHERE A.nombre = @nombre
    FOR JSON PATH, ROOT('ArticuloxNombre');
END;

---

CREATE PROCEDURE ConsultarArticuloPorTipo
    @id_TipoArticulo INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT A.nombre, TA.nombre as TipoArticulo, A.cantidad
    FROM Articulo A
    INNER JOIN TipoArticulo TA ON A.id_TipoArticulo = TA.id_TipoArticulo
    WHERE A.id_TipoArticulo = @id_TipoArticulo
    FOR JSON PATH, ROOT('ArticuloxTipo');
END; 



---

###########################
# Falta actualizar pedido #
###########################
---

CREATE PROCEDURE ConsultarPedidosPorCliente
    @nombreCliente NVARCHAR(128)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT P.id_Pedido, P.descripcion, P.nombreCliente, P.nombreEmpleado, P.fechaPedido, P.pagoTotal, T.nombre as TipoPedido
    FROM Pedido P
    INNER JOIN TipoPedido T ON P.id_TipoPedido = T.id_TipoPedido
    WHERE P.nombreCliente = @nombreCliente
    FOR JSON PATH, ROOT('PedidoxCliente');
END;

---

CREATE PROCEDURE ConsultarPedidosPorEmpleado
    @id_Estado INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT P.id_Pedido, P.descripcion, P.nombreCliente, P.nombreEmpleado, P.fechaPedido, P.pagoTotal, T.nombre as TipoPedido
    FROM Pedido P
    INNER JOIN TipoPedido T ON P.id_TipoPedido = T.id_TipoPedido
    WHERE P.id_Estado = @id_Estado
    FOR JSON PATH, ROOT('PedidoxEmpleado');
END;

---

CREATE PROCEDURE ConsultarPedidosPorEstado
    @nombreEmpleado NVARCHAR(128)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT P.id_Pedido, P.descripcion, P.nombreCliente, P.nombreEmpleado, P.fechaPedido, P.pagoTotal, T.nombre as TipoPedido
    FROM Pedido P
    INNER JOIN TipoPedido T ON P.id_TipoPedido = T.id_TipoPedido
    WHERE P.nombreEmpleado = @nombreEmpleado
    FOR JSON PATH, ROOT('PedidoxEmpleado');
END;


---

CREATE PROCEDURE ConsultarArticulosPorCantidad
AS
BEGIN
    SET NOCOUNT ON;

    SELECT *
    FROM Articulo
    WHERE cantidad <= 3;
END;

----------
################################################
AGREGAR ARTICULO

CREATE PROCEDURE AgregarArticulo
    @nombre NVARCHAR(128),
    @precio FLOAT,
    @cantidad INT,
    @nombreTA NVARCHAR(128) 
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @id_TipoArticulo INT;

    -- Buscar el id correspondiente a @nombreTA en la tabla TipoArticulo
    SELECT @id_TipoArticulo = id_Articulo FROM TipoArticulo WHERE nombre = @nombreTA;

    -- Si se encontró un id válido, realizar la inserción en la tabla Articulo
    IF @id_TipoArticulo IS NOT NULL
    BEGIN
        INSERT INTO Articulo (nombre, precio, cantidad, id_TipoArticulo)
        VALUES (@nombre, @precio, @cantidad, @id_TipoArticulo);
    END
    ELSE
    BEGIN
        -- Manejar la situación donde no se encontró un id correspondiente en TipoArticulo
        PRINT 'El tipo de artículo especificado no existe.';
    END
END;

###########################################

CREATE PROCEDURE AgregarPedido
    @descripcion NVARCHAR(128),
    @nombreCliente NVARCHAR(128),
    @nombreEmpleado NVARCHAR(128),
    @fechaPedido DATE,
    @pagoTotal FLOAT,
    @nombreP NVARCHAR(128) 
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @id_TipoPedido INT;

    -- Buscar el id correspondiente a @id_Estado en la tabla Estado
    SELECT @id_TipoPedido = id_Estado FROM Estado WHERE nombre = @nombreP;

    -- Si se encontró un id válido, realizar la inserción en la tabla Pedido
    IF @id_TipoPedido IS NOT NULL
    BEGIN
        INSERT INTO Pedido (descripcion, nombreCliente, nombreEmpleado, fechaPedido, pagoTotal, id_Estado)
        VALUES (@descripcion, @nombreCliente, @nombreEmpleado, @fechaPedido, @pagoTotal, @id_Estado);
    END
    ELSE
    BEGIN
        -- Manejar la situación donde no se encontró un id correspondiente en Estado
        PRINT 'El estado especificado no existe.';
    END
END;

