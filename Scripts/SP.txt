##########################################$
iniciar sesion 
###########################################

CREATE PROCEDURE VerificarCredenciales
    @username NVARCHAR(128),
    @contraseña NVARCHAR(128),
    @resultado INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    IF EXISTS (SELECT 1 FROM Usuario WHERE username = @username AND contraseña = @contraseña)
        SET @resultado = 1; -- Credenciales válidas
    ELSE
        SET @resultado = 0; -- Credenciales inválidas
END;



---Todos los articulos---

CREATE PROCEDURE ObtenerArticulos
AS
BEGIN
    SET NOCOUNT ON;
    SELECT A.id_Articulo, A.nombre, A.precio, A.cantidad, T.nombre as TipoArticulo
    FROM Articulo A
    INNER JOIN TipoArticulo T
    ON A.id_TipoArticulo = T.id_TipoArticulo
    FOR JSON AUTO;
END;


---Todos los pedidos---

CREATE PROCEDURE ObtenerPedidos
AS
BEGIN
    SET NOCOUNT ON;
    SELECT P.id_Pedido, P.descripcion, P.nombreCliente, P.nombreEmpleado, P.fechaPedido, P.pagoTotal, E.nombre as nombreEstado
    FROM Pedido P
    INNER JOIN Estado E
    ON P.id_Estado = E.id_Estado
    FOR JSON AUTO;
END;


----
##########################################################################################################
# NECESARIOS PARA ACTUALIZAR ARTICULOS
##########################################################################################################


CREATE PROCEDURE ActualizarArticuloPorNombre
    @id_Articulo INT,
    @nombre_TipoArticulo NVARCHAR(128),
    @nuevoPrecio FLOAT,
    @nuevaCantidad INT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @id_TipoArticulo INT;

    -- Buscar el id correspondiente al nombre_TipoArticulo en la tabla TipoArticulo
    SELECT @id_TipoArticulo = id_TipoArticulo FROM TipoArticulo WHERE nombre = @nombre_TipoArticulo;

    -- Si se encuentra el tipo de artículo, realizar la actualización
    IF @id_TipoArticulo IS NOT NULL
    BEGIN
        UPDATE Articulo
        SET precio = @nuevoPrecio,
            cantidad = @nuevaCantidad,
            id_TipoArticulo = @id_TipoArticulo
        WHERE id_Articulo = @id_Articulo;
    END
    ELSE
    BEGIN
        -- Manejar la situación donde no se encuentra el tipo de artículo con el nombre especificado
        PRINT 'No se encontró ningún tipo de artículo con el nombre especificado.';
    END
END;


############################################################
############################################################

CREATE PROCEDURE ActualizarPedidoPorNombre
    @id_Pedido INT,
    @nombre_Estado NVARCHAR(128),
    @descripcion NVARCHAR(128),
    @nombreCliente NVARCHAR(128),
    @nombreEmpleado NVARCHAR(128),
    @fechaPedido DATE,
    @pagoTotal FLOAT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @id_Estado INT;

    -- Buscar el id correspondiente al nombre_Estado en la tabla Estado
    SELECT @id_Estado = id_Estado FROM Estado WHERE nombre = @nombre_Estado;

   -- Buscar el id correspondiente al nombre del empleado en la tabla usuario
    SELECT @id_Usuario = id_Usuario FROM Estado WHERE nombre = @nombreEmpleado;

    -- Si se encuentra el estado, realizar la actualización
    IF @id_Estado IS NOT NULL
    BEGIN
        UPDATE Pedido
        SET descripcion = @descripcion,
            nombreCliente = @nombreCliente,
            fechaPedido = @fechaPedido,
            pagoTotal = @pagoTotal,
            id_Estado = @id_Estado
        WHERE id_Pedido = @id_Pedido;
    END
    ELSE
    BEGIN
        -- Manejar la situación donde no se encuentra el estado con el nombre especificado
        PRINT 'No se encontró ningún estado con el nombre especificado.';
    END
END;


---
---
##########################################
##########################################

CREATE PROCEDURE ConsultarArticuloPorNombre
    @nombre NVARCHAR(128)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT A.nombre, T.nombre as TipoArticulo, A.cantidad
    FROM Articulo A
    INNER JOIN TipoArticulo T ON A.id_TipoArticulo = T.id_TipoArticulo
    WHERE A.nombre = @nombre
    FOR JSON PATH, ROOT('ArticuloxNombre');
END;

---

CREATE PROCEDURE ConsultarArticuloPorTipo
    @id_TipoArticulo INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT A.nombre, TA.nombre as TipoArticulo, A.cantidad
    FROM Articulo A
    INNER JOIN TipoArticulo TA ON A.id_TipoArticulo = TA.id_TipoArticulo
    WHERE A.id_TipoArticulo = @id_TipoArticulo
    FOR JSON PATH, ROOT('ArticuloxTipo');
END; 



---

CREATE PROCEDURE ConsultarPedidosPorCliente
    @nombreCliente NVARCHAR(128)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT P.id_Pedido, P.descripcion, P.nombreCliente, P.nombreEmpleado, P.fechaPedido, P.pagoTotal, T.nombre as TipoPedido
    FROM Pedido P
    INNER JOIN TipoPedido T ON P.id_TipoPedido = T.id_TipoPedido
    WHERE P.nombreCliente = @nombreCliente
    FOR JSON PATH, ROOT('PedidoxCliente');
END;

---

CREATE PROCEDURE ConsultarPedidosPorEstado
    @id_Estado INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT P.id_Pedido, P.descripcion, P.nombreCliente, P.nombreEmpleado, P.fechaPedido, P.pagoTotal, T.nombre as TipoPedido
    FROM Pedido P
    INNER JOIN TipoPedido T ON P.id_TipoPedido = T.id_TipoPedido
    WHERE P.id_Estado = @id_Estado
    FOR JSON PATH, ROOT('PedidoxEmpleado');
END;

---

CREATE PROCEDURE ConsultarPedidosPorEmpleado
    @nombreEmpleado NVARCHAR(128)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT P.id_Pedido, P.descripcion, P.nombreCliente, P.nombreEmpleado, P.fechaPedido, P.pagoTotal, T.nombre as TipoPedido
    FROM Pedido P
    INNER JOIN TipoPedido T ON P.id_TipoPedido = T.id_TipoPedido
    WHERE P.nombreEmpleado = @nombreEmpleado
    FOR JSON PATH, ROOT('PedidoxEmpleado');
END;


---

CREATE PROCEDURE ConsultarArticulosPorCantidad
AS
BEGIN
    SET NOCOUNT ON;

    SELECT *
    FROM Articulo
    WHERE cantidad <= 3;
END;

----------
################################################
AGREGAR ARTICULO

CREATE PROCEDURE AgregarArticulo
    @nombre NVARCHAR(128),
    @precio FLOAT,
    @cantidad INT,
    @nombreTA NVARCHAR(128) 
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @id_TipoArticulo INT;

    -- Buscar el id correspondiente a @nombreTA en la tabla TipoArticulo
    SELECT @id_TipoArticulo = id_Articulo FROM TipoArticulo WHERE nombre = @nombreTA;

    -- Si se encontró un id válido, realizar la inserción en la tabla Articulo
    IF @id_TipoArticulo IS NOT NULL
    BEGIN
        INSERT INTO Articulo (nombre, precio, cantidad, id_TipoArticulo)
        VALUES (@nombre, @precio, @cantidad, @id_TipoArticulo);
    END
    ELSE
    BEGIN
        -- Manejar la situación donde no se encontró un id correspondiente en TipoArticulo
        PRINT 'El tipo de artículo especificado no existe.';
    END
END;

###########################################

CREATE PROCEDURE AgregarPedido
    @descripcion NVARCHAR(128),
    @nombreCliente NVARCHAR(128),
    @nombreEmpleado NVARCHAR(128),
    @fechaPedido DATE,
    @pagoTotal FLOAT,
    @nombreP NVARCHAR(128) 
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @id_TipoPedido INT;

    -- Buscar el id correspondiente a @id_Estado en la tabla Estado
    SELECT @id_TipoPedido = id_Estado FROM Estado WHERE nombre = @nombreP;

    -- Si se encontró un id válido, realizar la inserción en la tabla Pedido
    IF @id_TipoPedido IS NOT NULL
    BEGIN
        INSERT INTO Pedido (descripcion, nombreCliente, nombreEmpleado, fechaPedido, pagoTotal, id_Estado)
        VALUES (@descripcion, @nombreCliente, @nombreEmpleado, @fechaPedido, @pagoTotal, @id_Estado);
    END
    ELSE
    BEGIN
        -- Manejar la situación donde no se encontró un id correspondiente en Estado
        PRINT 'El estado especificado no existe.';
    END
END;

